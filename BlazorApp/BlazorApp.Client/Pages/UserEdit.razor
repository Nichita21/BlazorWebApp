@page "/user/edit"
@page "/user/edit/{id:int}"
@rendermode InteractiveWebAssembly
@using BlazorApp.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id.HasValue)
{
     <PageTitle>Edit User</PageTitle>
     <h1>Edit User</h1>
}
else
{
     <PageTitle>Create User</PageTitle>
     <h1>Create User</h1>
}

@if (user is not null)
{
     <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
          <DataAnnotationsValidator />

          <div class="mb-3">
               <label for="Username" class="form-label">Username</label>
               <InputText id="Username" @bind-Value="user.Username" class="form-control" />
               <ValidationMessage For="@(() => user.Username)" />
          </div>

          <div class="mb-3">
               <label for="Password" class="form-label">Password</label>
               <InputText id="Password" @bind-Value="user.Password" class="form-control" />
          </div>

          <div class="mb-3">
               <label for="Email" class="form-label">Email</label>
               <InputText id="model" @bind-Value="user.Email" class="form-control" />
          </div>

          <button type="submit" class="btn btn-primary">Save</button>
          <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
     </EditForm>
}
else
{
     <p><em>Loading...</em></p>
}

@code {
     [Parameter]
     public int? Id { get; set; }

     private UserDTO? user;
     private string? errorMessage;

     protected override async Task OnParametersSetAsync()
     {
          if (Id.HasValue)
          {
               user = await Http.GetFromJsonAsync<UserDTO>($"api/users/{Id.Value}");
          }
          else
          {
               user = new UserDTO();
          }
     }

     private async Task HandleValidSubmit()
     {
          HttpResponseMessage response;

          if (Id.HasValue)
          {
               user!.Id = Id.Value;
               response = await Http.PutAsJsonAsync($"api/users/{Id.Value}", user);
          }
          else
          {
               response = await Http.PostAsJsonAsync("api/users", user);
          }

          if (response.IsSuccessStatusCode)
          {
               NavigationManager.NavigateTo("/users");
          }
          else
          {
               errorMessage = $"Error saving user: {response.ReasonPhrase}";
               Console.WriteLine(errorMessage);
          }
     }

     private void Cancel()
     {
          NavigationManager.NavigateTo("/users");
     }
}
