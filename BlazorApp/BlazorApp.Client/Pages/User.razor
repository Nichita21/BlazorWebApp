@page "/users"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (users is null)
{
     <p><em>Loading...</em></p>
}
else if (!users.Any())
{
     <p><em>No users found.</em></p>
}
else
{
     <table class="table table-striped">
          <thead>
               <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th>Actions</th>
               </tr>
          </thead>
          <tbody>
               @foreach (var user in users)
               {
                    <tr>
                         <td>@user.Username</td>
                         <td>@user.Email</td>
                         <td>@user.Password</td>
                         <td>
                              <button class="btn btn-sm btn-primary" @onclick="() => SelectUserForEdit(user)">Edit</button>
                              <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                         </td>
                    </tr>
               }
          </tbody>
     </table>
}

<hr />

<h4>@(isEditing ? "Edit User" : "Add New User")</h4>

<EditForm Model="userToEdit" OnValidSubmit="SaveUser">
     <DataAnnotationsValidator />
     <ValidationSummary />

     <div class="mb-3">
          <label class="form-label">Username:</label>
          <InputText class="form-control" @bind-Value="userToEdit.Username" />
     </div>
     <div class="mb-3">
          <label class="form-label">Email:</label>
          <InputText class="form-control" @bind-Value="userToEdit.Email" />
     </div>
     <div class="mb-3">
          <label class="form-label">Password:</label>
          <InputText type="password" class="form-control" @bind-Value="userToEdit.Password" />
     </div>

     <button type="submit" class="btn btn-success">Save</button>
     @if (isEditing)
     {
          <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
     }
</EditForm>

@code {
     private List<BlazorApp.Shared.DTOs.UserDTO>? users;
     private BlazorApp.Shared.DTOs.UserDTO userToEdit = new() { Username = "", Email = "", Password = "" };
     private bool isEditing = false;

     protected override async Task OnInitializedAsync()
     {
          await LoadUsers();
     }

     private async Task LoadUsers()
     {
          try
          {
               users = await Http.GetFromJsonAsync<List<BlazorApp.Shared.DTOs.UserDTO>>("api/users");
               users ??= new List<BlazorApp.Shared.DTOs.UserDTO>();
          }
          catch (Exception ex)
          {
               Console.Error.WriteLine($"Error loading users: {ex.Message}");
               users = new List<BlazorApp.Shared.DTOs.UserDTO>();
          }
     }

     private void SelectUserForEdit(BlazorApp.Shared.DTOs.UserDTO user)
     {
          userToEdit = new()
          {
               Id = user.Id,
               Username = user.Username,
               Email = user.Email,
               Password = user.Password
          };
          isEditing = true;
     }

     private async Task SaveUser()
     {
          try
          {
               if (isEditing)
               {
                    await Http.PutAsJsonAsync($"api/users/{userToEdit.Id}", userToEdit);
               }
               else
               {
                    await Http.PostAsJsonAsync("api/users", userToEdit);
               }

               await LoadUsers();
               CancelEdit();
          }
          catch (Exception ex)
          {
               Console.Error.WriteLine($"Error saving user: {ex.Message}");
          }
     }

     private async Task DeleteUser(int id)
     {
          bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
          if (confirmed)
          {
               try
               {
                    await Http.DeleteAsync($"api/users/{id}");
                    await LoadUsers();
               }
               catch (Exception ex)
               {
                    Console.Error.WriteLine($"Error deleting user: {ex.Message}");
               }
          }
     }

     private void CancelEdit()
     {
          userToEdit = new() { Username = "", Email = "", Password = "" };
          isEditing = false;
     }
}
